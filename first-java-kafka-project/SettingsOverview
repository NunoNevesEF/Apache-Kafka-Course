Kafka Producer — Important Properties & Concepts
Kafka Defaults since version 3.0
acks = all

enable.idempotence = true

Kafka 2.8 or lower defaults
acks = 1

enable.idempotence = false

Meaning of acks values
acks Value	Description	Data Loss Risk
0	Producer does not wait for any acknowledgment (ACK)	Possible data loss
1	Producer waits for ACK from the leader only	Limited data loss
all / -1	Producer waits for ACK from leader and all in-sync replicas	No data loss

More acknowledgments mean safer delivery but less efficiency (higher latency).

ISR (In-Sync Replicas)
ISR is the set of replicas fully caught up with the leader.

Used when replication factor > 1.

When a broker in ISR fails to ACK, others may still ACK to keep consistency.

min.insync.replicas controls the minimum ISR members required for a successful write:

min.insync.replicas=1: only leader needs to ACK (faster, less safe).

min.insync.replicas=2: leader + at least one replica must ACK (safer).

Retries & Ordering
Older Kafka versions could reorder messages during retries.

With idempotent producers (enable.idempotence=true), retries preserve message order and avoid duplicates.

Idempotent Producer
Enabled by default since Kafka 3.0.

Guarantees exactly-once delivery per partition even with retries.

Compression
More efficient with larger batch sizes.

Compression type (e.g., gzip, snappy, lz4, zstd) can be configured.

Partitioning
Sticky partitioners (default in new Kafka versions) assign batches to the same partition, improving compression and throughput.

Kafka Consumer — Important Properties & Concepts
Group Management
Consumers belong to a consumer group identified by group.id.

Kafka ensures each partition in a topic is consumed by only one consumer within the group.

Offset Management
Offsets track the position of the consumer in each partition.

Auto-commit options:

Property	Description	Default
enable.auto.commit	Automatically commit offsets periodically	true
auto.commit.interval.ms	Interval between auto commits (if enabled)	5000 ms
auto.offset.reset	What to do when there’s no committed offset	latest

auto.offset.reset options:

latest: start consuming from the latest message (default).

earliest: start from the earliest available message.

none: throw error if no offset is found.

Session and Heartbeat
session.timeout.ms: max time before a consumer is considered dead if no heartbeat.

heartbeat.interval.ms: frequency of heartbeat messages to broker.

Polling
Consumers poll messages using poll(Duration) API.

Poll frequency should be less than max.poll.interval.ms to avoid consumer group rebalance.

Deserialization
Configure key and value deserializers (key.deserializer, value.deserializer), e.g., StringDeserializer, ByteArrayDeserializer.

Max Poll Records
max.poll.records: max number of records returned per poll (default 500).

Useful for controlling batch sizes.

Rebalance and Partition Assignment Strategies
Controls how partitions are distributed across consumers in a group. Examples:

RangeAssignor

RoundRobinAssignor

StickyAssignor (default, keeps partitions sticky to consumers for stability)

Manual Offset Control
If enable.auto.commit=false, offsets must be committed manually using commitSync() or commitAsync().